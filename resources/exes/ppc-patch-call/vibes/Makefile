# This file was generated by vibes-init
# Please edit at your own risk

# Base definitions

TARGET := bap:powerpc-gnu-elf
LANG := bap:llvm-powerpc32
MODEL := $(HOME)/.vibes/model.mzn
BINARY := ../main
PATCHED_BINARY := ../main.patched
OGRE := loader.ogre
SPACES := patch-spaces.json

# Definitions for patch ret-3 (0)

PATCH_0 := ret-3.c
PATCH_0_INFO := ret-3.info.json
PATCH_0_BIR := ret-3.bir
PATCH_0_BIR_OPT := ret-3.opt.bir
PATCH_0_VIR := ret-3.vir
PATCH_0_ASM := ret-3.asm
PATCH_0_CONSTRAINTS := ret-3.mzn

# Targets for patch ret-3 (0)

.PHONY: parse0
parse0:
	rm -f $(PATCH_0_BIR)
	$(MAKE) $(PATCH_0_BIR)

$(PATCH_0_BIR): $(PATCH_0) $(PATCH_0_INFO)
	vibes-parse --target $(TARGET) --patch-filepath $(PATCH_0) --patch-info-filepath $(PATCH_0_INFO) --bir-outfile $(PATCH_0_BIR) --verbose

.PHONY: opt0
opt0:
	rm -f $(PATCH_0_BIR_OPT)
	$(MAKE) $(PATCH_0_BIR_OPT)

$(PATCH_0_BIR_OPT): $(PATCH_0_BIR)
	vibes-opt --target $(TARGET) --language $(LANG) --patch-info-filepath $(PATCH_0_INFO) --bir-filepath $(PATCH_0_BIR) --bir-outfile $(PATCH_0_BIR_OPT) --verbose

.PHONY: select0
select0:
	rm -f $(PATCH_0_VIR)
	$(MAKE) $(PATCH_0_VIR)

$(PATCH_0_VIR): $(PATCH_0_BIR_OPT)
	vibes-select --target $(TARGET) --language $(LANG) --patch-info-filepath $(PATCH_0_INFO) --bir-filepath $(PATCH_0_BIR_OPT) --vir-outfile $(PATCH_0_VIR) --verbose

.PHONY: as0
as0:
	rm -f $(PATCH_0_ASM)
	$(MAKE) $(PATCH_0_ASM)

$(PATCH_0_ASM): $(PATCH_0_VIR)
	vibes-as --target $(TARGET) --language $(LANG) --vir-filepath $(PATCH_0_VIR) --asm-outfile $(PATCH_0_ASM) --model $(MODEL) --patch-info-filepath $(PATCH_0_INFO) --extra-constraints $(PATCH_0_CONSTRAINTS) --verbose

.PHONY: clean0
clean0:
	rm -f $(PATCH_0_BIR) $(PATCH_0_BIR_OPT) $(PATCH_0_VIR) $(PATCH_0_ASM) $(PATCHED_BINARY)

# Main targets

.PHONY: parse
parse: parse0

.PHONY: opt
opt: opt0

.PHONY: select
select: select0

.PHONY: as
as: as0

.PHONY: patch
patch:
	rm -f $(PATCHED_BINARY)
	$(MAKE) $(PATCHED_BINARY)

$(PATCHED_BINARY): $(PATCH_0_ASM) $(OGRE)
	vibes-patch --target $(TARGET) --language $(LANG) --binary $(BINARY) --patch-spaces $(SPACES) --asm-filepaths $(PATCH_0_ASM) --patched-binary $(PATCHED_BINARY) --ogre $(OGRE) --verbose
	chmod +x $(PATCHED_BINARY)

.PHONY: clean
clean: clean0

.DEFAULT_GOAL := all
all: $(PATCHED_BINARY)
